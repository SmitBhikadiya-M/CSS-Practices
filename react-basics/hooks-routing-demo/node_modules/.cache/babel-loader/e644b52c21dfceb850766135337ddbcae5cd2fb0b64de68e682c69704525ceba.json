{"ast":null,"code":"var _jsxFileName = \"/home/smit/Desktop/Smit/Learning/Fundamentals/web-dev/react-basics/hooks-routing-demo/src/components/Hooks/UseEffectDemo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = ['RED', 'GREEN', 'BLUE'];\nconst UseEffectDemo = () => {\n  _s();\n  const [randomColor, setRandomColor] = useState(COLORS[0]);\n\n  // Return a new random color from the COLORS array\n  function getRandomColor() {\n    let newColor = COLORS[Math.floor(Math.random(1) * 3)];\n    if (newColor === randomColor) return getRandomColor();\n    return newColor;\n  }\n\n  // Called everytime whenever any of the state changes of the component\n  useEffect(() => {\n    console.log(\"MOUNT: Use Effect 1\", randomColor);\n    return () => {\n      console.log(\"UNMOUNT: Use Effect 1\", randomColor);\n    };\n  });\n\n  // Called first time when the component is getting rendered\n  useEffect(() => {\n    console.log(\"MOUNT: Use Effect 2\", randomColor);\n    return () => {\n      console.log(\"UNMOUNT: Use Effect 2\", randomColor);\n    };\n  }, []);\n\n  // Called when the randomColor state gets updated\n  useEffect(() => {\n    console.log(\"MOUNT: Use Effect 3\", randomColor);\n    return () => {\n      console.log(\"UNMOUNT: Use Effect 3\", randomColor);\n    };\n  }, [randomColor]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setRandomColor(getRandomColor()),\n      children: \"Click hear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: randomColor\n      },\n      children: \" to generate random RGB\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: '12px'\n      },\n      children: \"**check logs on your browser console\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n};\n_s(UseEffectDemo, \"TkQArfqgrVlvamCTjBW4UGVHgW0=\");\n_c = UseEffectDemo;\nexport const UseEffectDemoString = `\n    const COLORS = ['RED', 'GREEN', 'BLUE'];\n\n    const UseEffectDemo = () => {\n\n      const [randomColor, setRandomColor] = useState(COLORS[0])\n\n      // Return a new random color from the COLORS array\n      function getRandomColor() {\n        let newColor = COLORS[Math.floor(Math.random(1) * 3)];\n        if (newColor === randomColor) return getRandomColor();\n        return newColor;\n      }\n\n      // Called everytime whenever any of the state changes of the component\n      useEffect(() => {\n        console.log(\"MOUNT: Use Effect 1\", randomColor);\n        return () => {\n          console.log(\"UNMOUNT: Use Effect 1\", randomColor);\n        }\n      })\n\n      // Called first time when the component is getting rendered\n      useEffect(() => {\n        console.log(\"MOUNT: Use Effect 2\", randomColor);\n        return () => {\n          console.log(\"UNMOUNT: Use Effect 2\", randomColor);\n        }\n      }, [])\n\n      // Called when the randomColor state gets updated\n      useEffect(() => {\n        console.log(\"MOUNT: Use Effect 3\", randomColor);\n        return () => {\n          console.log(\"UNMOUNT: Use Effect 3\", randomColor);\n        }\n      }, [randomColor])\n\n      return <div>\n        <button onClick={() => setRandomColor(getRandomColor())}>Click hear</button>\n        <span style={{ color: randomColor }}> to generate random RGB</span>\n      </div>;\n    };\n`;\nexport default UseEffectDemo;\nvar _c;\n$RefreshReg$(_c, \"UseEffectDemo\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","COLORS","UseEffectDemo","_s","randomColor","setRandomColor","getRandomColor","newColor","Math","floor","random","console","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","color","fontSize","_c","UseEffectDemoString","$RefreshReg$"],"sources":["/home/smit/Desktop/Smit/Learning/Fundamentals/web-dev/react-basics/hooks-routing-demo/src/components/Hooks/UseEffectDemo.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst COLORS = ['RED', 'GREEN', 'BLUE'];\n\nconst UseEffectDemo = () => {\n\n  const [randomColor, setRandomColor] = useState(COLORS[0])\n\n  // Return a new random color from the COLORS array\n  function getRandomColor() {\n    let newColor = COLORS[Math.floor(Math.random(1) * 3)];\n    if (newColor === randomColor) return getRandomColor();\n    return newColor;\n  }\n\n  // Called everytime whenever any of the state changes of the component\n  useEffect(() => {\n    console.log(\"MOUNT: Use Effect 1\", randomColor);\n    return () => {\n      console.log(\"UNMOUNT: Use Effect 1\", randomColor);\n    }\n  })\n\n  // Called first time when the component is getting rendered\n  useEffect(() => {\n    console.log(\"MOUNT: Use Effect 2\", randomColor);\n    return () => {\n      console.log(\"UNMOUNT: Use Effect 2\", randomColor);\n    }\n  }, [])\n\n  // Called when the randomColor state gets updated\n  useEffect(() => {\n    console.log(\"MOUNT: Use Effect 3\", randomColor);\n    return () => {\n      console.log(\"UNMOUNT: Use Effect 3\", randomColor);\n    }\n  }, [randomColor])\n\n  return <div>\n    <button onClick={() => setRandomColor(getRandomColor())}>Click hear</button>\n    <span style={{ color: randomColor }}> to generate random RGB</span>\n    <br></br><p style={{ fontSize: '12px' }}>**check logs on your browser console</p>\n  </div>;\n};\n\nexport const UseEffectDemoString = `\n    const COLORS = ['RED', 'GREEN', 'BLUE'];\n\n    const UseEffectDemo = () => {\n\n      const [randomColor, setRandomColor] = useState(COLORS[0])\n\n      // Return a new random color from the COLORS array\n      function getRandomColor() {\n        let newColor = COLORS[Math.floor(Math.random(1) * 3)];\n        if (newColor === randomColor) return getRandomColor();\n        return newColor;\n      }\n\n      // Called everytime whenever any of the state changes of the component\n      useEffect(() => {\n        console.log(\"MOUNT: Use Effect 1\", randomColor);\n        return () => {\n          console.log(\"UNMOUNT: Use Effect 1\", randomColor);\n        }\n      })\n\n      // Called first time when the component is getting rendered\n      useEffect(() => {\n        console.log(\"MOUNT: Use Effect 2\", randomColor);\n        return () => {\n          console.log(\"UNMOUNT: Use Effect 2\", randomColor);\n        }\n      }, [])\n\n      // Called when the randomColor state gets updated\n      useEffect(() => {\n        console.log(\"MOUNT: Use Effect 3\", randomColor);\n        return () => {\n          console.log(\"UNMOUNT: Use Effect 3\", randomColor);\n        }\n      }, [randomColor])\n\n      return <div>\n        <button onClick={() => setRandomColor(getRandomColor())}>Click hear</button>\n        <span style={{ color: randomColor }}> to generate random RGB</span>\n      </div>;\n    };\n`;\n\nexport default UseEffectDemo;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,MAAM,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC;AAEvC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE1B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEzD;EACA,SAASK,cAAcA,CAAA,EAAG;IACxB,IAAIC,QAAQ,GAAGN,MAAM,CAACO,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACrD,IAAIH,QAAQ,KAAKH,WAAW,EAAE,OAAOE,cAAc,CAAC,CAAC;IACrD,OAAOC,QAAQ;EACjB;;EAEA;EACAV,SAAS,CAAC,MAAM;IACdc,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAER,WAAW,CAAC;IAC/C,OAAO,MAAM;MACXO,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAER,WAAW,CAAC;IACnD,CAAC;EACH,CAAC,CAAC;;EAEF;EACAP,SAAS,CAAC,MAAM;IACdc,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAER,WAAW,CAAC;IAC/C,OAAO,MAAM;MACXO,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAER,WAAW,CAAC;IACnD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAP,SAAS,CAAC,MAAM;IACdc,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAER,WAAW,CAAC;IAC/C,OAAO,MAAM;MACXO,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAER,WAAW,CAAC;IACnD,CAAC;EACH,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,oBAAOJ,OAAA;IAAAa,QAAA,gBACLb,OAAA;MAAQc,OAAO,EAAEA,CAAA,KAAMT,cAAc,CAACC,cAAc,CAAC,CAAC,CAAE;MAAAO,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC5ElB,OAAA;MAAMmB,KAAK,EAAE;QAAEC,KAAK,EAAEhB;MAAY,CAAE;MAAAS,QAAA,EAAC;IAAuB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACnElB,OAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAAAlB,OAAA;MAAGmB,KAAK,EAAE;QAAEE,QAAQ,EAAE;MAAO,CAAE;MAAAR,QAAA,EAAC;IAAoC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9E,CAAC;AACR,CAAC;AAACf,EAAA,CAxCID,aAAa;AAAAoB,EAAA,GAAbpB,aAAa;AA0CnB,OAAO,MAAMqB,mBAAmB,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,eAAerB,aAAa;AAAC,IAAAoB,EAAA;AAAAE,YAAA,CAAAF,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}