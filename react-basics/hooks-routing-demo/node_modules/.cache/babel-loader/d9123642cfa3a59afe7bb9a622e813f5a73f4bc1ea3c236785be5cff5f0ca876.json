{"ast":null,"code":"var _jsxFileName = \"/home/smit/Desktop/Smit/Learning/Fundamentals/web-dev/react-basics/hooks-routing-demo/src/components/Hooks/UseMemoDemo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst expensiveCalculation = num => {\n  console.log(\"Calculating...\");\n  for (let i = 0; i < 1000000000; i++) {\n    num += 1;\n  }\n  console.log(\"Calculated: \" + num);\n  return num;\n};\nconst UseMemoDemo = () => {\n  _s();\n  const [count, setCount] = useState(0);\n  const [todos, setTodos] = useState([]);\n\n  /*  The expensive calculations will only be executed and return \n        updated value when the count is updated else return a old value */\n  const calculation = useMemo(() => expensiveCalculation(count), [count]);\n  const increment = () => {\n    setCount(count + 1);\n  };\n  const addTodo = () => {\n    setTodos(todos => [...todos, \"New Todo\"]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"My Todos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), todos.map((todo, index) => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: todo\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 18\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addTodo,\n        children: \"Add Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Count: \", count, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increment,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Expensive Calculation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), calculation]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(UseMemoDemo, \"23TvEeS1FqPc8Aev4T6UqM9ZDgI=\");\n_c = UseMemoDemo;\nexport const UseMemoDemoString = `\n  const expensiveCalculation = (num) => {\n    console.log(\"Calculating...\");\n    for (let i = 0; i < 1000000000; i++) {\n      num += 1;\n    }\n    console.log(\"Calculated: \" + num);\n    return num;\n  };\n\n  const UseMemoDemo = () => {\n\n    const [count, setCount] = useState(0);\n    const [todos, setTodos] = useState([]);\n\n    /*  The expensive calculations will only be executed and return \n        updated value when the count is updated else return a old value */\n    const calculation = useMemo(()=>expensiveCalculation(count), [count]);\n\n    const increment = () => {\n      setCount(count+1);\n    };\n    const addTodo = () => {\n      setTodos((todos) => [...todos, \"New Todo\"]);\n    };\n\n    return (\n      <div>\n        <div>\n          <h2>My Todos</h2>\n          {todos.map((todo, index) => {\n            return <p key={index}>{todo}</p>;\n          })}\n          <button onClick={addTodo}>Add Todo</button>\n        </div>\n        <hr />\n        <div>\n          Count: {count}\n          <button onClick={increment}>+</button>\n          <h2>Expensive Calculation</h2>\n          {calculation}\n        </div>\n      </div>\n    );\n  };\n`;\nexport default UseMemoDemo;\nvar _c;\n$RefreshReg$(_c, \"UseMemoDemo\");","map":{"version":3,"names":["React","useMemo","useState","jsxDEV","_jsxDEV","expensiveCalculation","num","console","log","i","UseMemoDemo","_s","count","setCount","todos","setTodos","calculation","increment","addTodo","children","fileName","_jsxFileName","lineNumber","columnNumber","map","todo","index","onClick","_c","UseMemoDemoString","$RefreshReg$"],"sources":["/home/smit/Desktop/Smit/Learning/Fundamentals/web-dev/react-basics/hooks-routing-demo/src/components/Hooks/UseMemoDemo.jsx"],"sourcesContent":["import React, { useMemo, useState } from \"react\";\n\nconst expensiveCalculation = (num) => {\n  console.log(\"Calculating...\");\n  for (let i = 0; i < 1000000000; i++) {\n    num += 1;\n  }\n  console.log(\"Calculated: \" + num);\n  return num;\n};\n\nconst UseMemoDemo = () => {\n\n  const [count, setCount] = useState(0);\n  const [todos, setTodos] = useState([]);\n\n  /*  The expensive calculations will only be executed and return \n        updated value when the count is updated else return a old value */\n  const calculation = useMemo(()=>expensiveCalculation(count), [count]);\n\n  const increment = () => {\n    setCount(count+1);\n  };\n  const addTodo = () => {\n    setTodos((todos) => [...todos, \"New Todo\"]);\n  };\n\n  return (\n    <div>\n      <div>\n        <h2>My Todos</h2>\n        {todos.map((todo, index) => {\n          return <p key={index}>{todo}</p>;\n        })}\n        <button onClick={addTodo}>Add Todo</button>\n      </div>\n      <hr />\n      <div>\n        Count: {count}\n        <button onClick={increment}>+</button>\n        <h2>Expensive Calculation</h2>\n        {calculation}\n      </div>\n    </div>\n  );\n};\n\nexport const UseMemoDemoString = `\n  const expensiveCalculation = (num) => {\n    console.log(\"Calculating...\");\n    for (let i = 0; i < 1000000000; i++) {\n      num += 1;\n    }\n    console.log(\"Calculated: \" + num);\n    return num;\n  };\n\n  const UseMemoDemo = () => {\n\n    const [count, setCount] = useState(0);\n    const [todos, setTodos] = useState([]);\n\n    /*  The expensive calculations will only be executed and return \n        updated value when the count is updated else return a old value */\n    const calculation = useMemo(()=>expensiveCalculation(count), [count]);\n\n    const increment = () => {\n      setCount(count+1);\n    };\n    const addTodo = () => {\n      setTodos((todos) => [...todos, \"New Todo\"]);\n    };\n\n    return (\n      <div>\n        <div>\n          <h2>My Todos</h2>\n          {todos.map((todo, index) => {\n            return <p key={index}>{todo}</p>;\n          })}\n          <button onClick={addTodo}>Add Todo</button>\n        </div>\n        <hr />\n        <div>\n          Count: {count}\n          <button onClick={increment}>+</button>\n          <h2>Expensive Calculation</h2>\n          {calculation}\n        </div>\n      </div>\n    );\n  };\n`;\n\nexport default UseMemoDemo;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}